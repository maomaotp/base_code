!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DICT_ERR	dict.h	45;"	d
DICT_HT_INITIAL_SIZE	dict.h	154;"	d
DICT_NOTUSED	dict.h	48;"	d
DICT_OK	dict.h	44;"	d
HAVE_MALLOC_SIZE	zmalloc.h	42;"	d
HAVE_MALLOC_SIZE	zmalloc.h	52;"	d
HAVE_MALLOC_SIZE	zmalloc.h	60;"	d
PREFIX_SIZE	zmalloc.c	48;"	d	file:
PREFIX_SIZE	zmalloc.c	51;"	d	file:
PREFIX_SIZE	zmalloc.c	53;"	d	file:
ZMALLOC_LIB	zmalloc.h	39;"	d
ZMALLOC_LIB	zmalloc.h	49;"	d
ZMALLOC_LIB	zmalloc.h	65;"	d
_BSD_SOURCE	fmacros.h	33;"	d
_FILE_OFFSET_BITS	fmacros.h	46;"	d
_GNU_SOURCE	fmacros.h	36;"	d
_LARGEFILE_SOURCE	fmacros.h	45;"	d
_REDIS_FMACRO_H	fmacros.h	31;"	d
_XOPEN_SOURCE	fmacros.h	40;"	d
_XOPEN_SOURCE	fmacros.h	42;"	d
__DICT_H	dict.h	39;"	d
__ZMALLOC_H	zmalloc.h	32;"	d
__str	zmalloc.h	36;"	d
__xstr	zmalloc.h	35;"	d
_dictClear	dict.c	/^int _dictClear(dict *d, dictht *ht)$/;"	f
_dictExpandIfNeeded	dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	file:
_dictInit	dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f
_dictKeyIndex	dict.c	/^static int _dictKeyIndex(dict *d, const void *key)$/;"	f	file:
_dictNextPower	dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	file:
_dictRehashStep	dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:
_dictReset	dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:
buf	hash_test.c	/^	char buf[];$/;"	m	struct:sdshdr	file:
calloc	zmalloc.c	60;"	d	file:
calloc	zmalloc.c	65;"	d	file:
d	dict.h	/^    dict *d;                $/;"	m	struct:dictIterator
dbDictType	hash_test.c	/^dictType dbDictType = {$/;"	v
dict	dict.h	/^typedef struct dict {$/;"	s
dict	dict.h	/^} dict;$/;"	t	typeref:struct:dict
dictAdd	dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f
dictAddRaw	dict.c	/^dictEntry *dictAddRaw(dict *d, void *key)$/;"	f
dictCompareKeys	dict.h	185;"	d
dictCreate	dict.c	/^dict *dictCreate(dictType *type,$/;"	f
dictDelete	dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f
dictDeleteNoFree	dict.c	/^int dictDeleteNoFree(dict *ht, const void *key) {$/;"	f
dictDisableResize	dict.c	/^void dictDisableResize(void) {$/;"	f
dictEmpty	dict.c	/^void dictEmpty(dict *d) {$/;"	f
dictEnableResize	dict.c	/^void dictEnableResize(void) {$/;"	f
dictEntry	dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictExpand	dict.c	/^int dictExpand(dict *d, unsigned long size)$/;"	f
dictFetchValue	dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f
dictFind	dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f
dictFreeKey	dict.h	174;"	d
dictFreeVal	dict.h	157;"	d
dictGenCaseHashFunction	dict.c	/^unsigned int dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenHashFunction	dict.c	/^unsigned int dictGenHashFunction(const void *key, int len) {$/;"	f
dictGenericDelete	dict.c	/^static int dictGenericDelete(dict *d, const void *key, int nofree)$/;"	f	file:
dictGetHashFunctionSeed	dict.c	/^uint32_t dictGetHashFunctionSeed(void) {$/;"	f
dictGetIterator	dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f
dictGetKey	dict.h	191;"	d
dictGetRandomKey	dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f
dictGetSafeIterator	dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f
dictGetSignedIntegerVal	dict.h	193;"	d
dictGetUnsignedIntegerVal	dict.h	194;"	d
dictGetVal	dict.h	192;"	d
dictHashKey	dict.h	190;"	d
dictIdentityHashFunction	dict.c	/^unsigned int dictIdentityHashFunction(unsigned int key)$/;"	f
dictIntHashFunction	dict.c	/^unsigned int dictIntHashFunction(unsigned int key)$/;"	f
dictIsRehashing	dict.h	197;"	d
dictIterator	dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictNext	dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f
dictRedisObjectDestructor	hash_test.c	/^void dictRedisObjectDestructor(void *privdata, void *val){$/;"	f
dictRehash	dict.c	/^int dictRehash(dict *d, int n) {$/;"	f
dictRehashMilliseconds	dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f
dictRelease	dict.c	/^void dictRelease(dict *d)$/;"	f
dictReleaseIterator	dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f
dictReplace	dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f
dictReplaceRaw	dict.c	/^dictEntry *dictReplaceRaw(dict *d, void *key) {$/;"	f
dictResize	dict.c	/^int dictResize(dict *d)$/;"	f
dictSdsDestructor	hash_test.c	/^void dictSdsDestructor(void *privdata, void *val) {$/;"	f
dictSdsHash	hash_test.c	/^unsigned int dictSdsHash(const void *key) {$/;"	f
dictSdsKeyCompare	hash_test.c	/^int dictSdsKeyCompare(void *privdata, const void *key1, const void *key2){$/;"	f
dictSetHashFunctionSeed	dict.c	/^void dictSetHashFunctionSeed(uint32_t seed) {$/;"	f
dictSetKey	dict.h	178;"	d
dictSetSignedIntegerVal	dict.h	168;"	d
dictSetUnsignedIntegerVal	dict.h	171;"	d
dictSetVal	dict.h	161;"	d
dictSize	dict.h	196;"	d
dictSlots	dict.h	195;"	d
dictType	dict.h	/^typedef struct dictType {$/;"	s
dictType	dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dict_can_resize	dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
dict_hash_function_seed	dict.c	/^static uint32_t dict_hash_function_seed = 5381;$/;"	v	file:
dictht	dict.h	/^typedef struct dictht {$/;"	s
dictht	dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
entry	dict.h	/^    dictEntry *entry,       \/\/ 当前哈希节点$/;"	m	struct:dictIterator
free	hash_test.c	/^	int free;$/;"	m	struct:sdshdr	file:
free	zmalloc.c	62;"	d	file:
free	zmalloc.c	67;"	d	file:
hashFunction	dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
ht	dict.h	/^    dictht ht[2];       $/;"	m	struct:dict
index	dict.h	/^        index,              \/\/ 正在迭代的哈希表数组的索引$/;"	m	struct:dictIterator
iterators	dict.h	/^    int iterators;      $/;"	m	struct:dict
key	dict.h	/^    void *key;$/;"	m	struct:dictEntry
keyCompare	dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
len	hash_test.c	/^	int len;$/;"	m	struct:sdshdr	file:
main	hash_test.c	/^int main()$/;"	f
malloc	zmalloc.c	59;"	d	file:
malloc	zmalloc.c	64;"	d	file:
next	dict.h	/^    struct dictEntry *next; $/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
nextEntry	dict.h	/^              *nextEntry;   \/\/ 当前哈希节点的后继节点$/;"	m	struct:dictIterator
privdata	dict.h	/^    void *privdata;$/;"	m	struct:dict
realloc	zmalloc.c	61;"	d	file:
realloc	zmalloc.c	66;"	d	file:
rehashidx	dict.h	/^    int rehashidx;$/;"	m	struct:dict
s64	dict.h	/^        int64_t s64;$/;"	m	union:dictEntry::__anon1
safe	dict.h	/^        safe;               \/\/ 是否安全？$/;"	m	struct:dictIterator
sds	hash_test.c	/^typedef char *sds;$/;"	t	file:
sdsfree	hash_test.c	/^void sdsfree(sds s) {$/;"	f
sdshdr	hash_test.c	/^struct sdshdr {$/;"	s	file:
sdslen	hash_test.c	/^static inline size_t sdslen(const sds s) {$/;"	f	file:
sdsnew	hash_test.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	hash_test.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
size	dict.h	/^    unsigned long size;     $/;"	m	struct:dictht
sizemask	dict.h	/^    unsigned long sizemask; $/;"	m	struct:dictht
table	dict.h	/^    dictEntry **table;      $/;"	m	struct:dictht
table	dict.h	/^    int table,              \/\/ 正在迭代的哈希表的号码（0 或者 1）$/;"	m	struct:dictIterator
timeInMilliseconds	dict.c	/^long long timeInMilliseconds(void) {$/;"	f
type	dict.h	/^    dictType *type;$/;"	m	struct:dict
u64	dict.h	/^        uint64_t u64;$/;"	m	union:dictEntry::__anon1
update_zmalloc_stat_add	zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	zmalloc.c	74;"	d	file:
update_zmalloc_stat_alloc	zmalloc.c	88;"	d	file:
update_zmalloc_stat_free	zmalloc.c	98;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	80;"	d	file:
used	dict.h	/^    unsigned long used;     $/;"	m	struct:dictht
used_memory	zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory_mutex	zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
v	dict.h	/^    } v;$/;"	m	struct:dictEntry	typeref:union:dictEntry::__anon1
val	dict.h	/^        void *val;$/;"	m	union:dictEntry::__anon1
valDestructor	dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
zcalloc	zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zfree	zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zlibc_free	zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zmalloc	zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc_default_oom	zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_enable_thread_safeness	zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_get_fragmentation_ratio	zmalloc.c	/^float zmalloc_get_fragmentation_ratio(void) {$/;"	f
zmalloc_get_private_dirty	zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f
zmalloc_get_rss	zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_oom_handler	zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_set_oom_handler	zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_size	zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_size	zmalloc.h	43;"	d
zmalloc_size	zmalloc.h	53;"	d
zmalloc_size	zmalloc.h	61;"	d
zmalloc_thread_safe	zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_used_memory	zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zrealloc	zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zstrdup	zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
