!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
REDIS_CMD_ADMIN	redis_hash.h	11;"	d
REDIS_CMD_ASKING	redis_hash.h	19;"	d
REDIS_CMD_DENYOOM	redis_hash.h	9;"	d
REDIS_CMD_FAST	redis_hash.h	20;"	d
REDIS_CMD_LOADING	redis_hash.h	16;"	d
REDIS_CMD_NOSCRIPT	redis_hash.h	13;"	d
REDIS_CMD_NOT_USED_1	redis_hash.h	10;"	d
REDIS_CMD_PUBSUB	redis_hash.h	12;"	d
REDIS_CMD_RANDOM	redis_hash.h	14;"	d
REDIS_CMD_READONLY	redis_hash.h	8;"	d
REDIS_CMD_SKIP_MONITOR	redis_hash.h	18;"	d
REDIS_CMD_SORT_FOR_SCRIPT	redis_hash.h	15;"	d
REDIS_CMD_STALE	redis_hash.h	17;"	d
REDIS_CMD_WRITE	redis_hash.h	7;"	d
REDIS_ERR	redis_hash.h	5;"	d
REDIS_OK	redis_hash.h	4;"	d
_HEAD_SDS_H	sds.h	2;"	d
_REDIS_HASH_H	redis_hash.h	2;"	d
_dictInit	redis_hash.c	/^static void _dictInit(dict *d, dictType *type, void *privDataPtr)$/;"	f	file:
_dictKeyIndex	redis_hash.c	/^static int _dictKeyIndex(dict *d, const void *key)$/;"	f	file:
argc	redis_hash.h	/^    int argc;$/;"	m	struct:redisClient
argv	redis_hash.h	/^    robj **argv;$/;"	m	struct:redisClient
arity	redis_hash.h	/^	int arity;$/;"	m	struct:redisCommand
authenticated	redis_hash.h	/^    int authenticated;      \/* when requirepass is non-NULL *\/$/;"	m	struct:redisClient
avg_ttl	redis_hash.h	/^    long long avg_ttl;          \/* Average TTL, just for stats *\/$/;"	m	struct:redisDb
bgsaveerr	redis_hash.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
blocking_keys	redis_hash.h	/^    dict *blocking_keys;        \/* Keys with clients waiting for data (BLPOP) *\/$/;"	m	struct:redisDb
buf	redis_hash.h	/^    char buf[16*1024];$/;"	m	struct:redisClient
buf	sds.h	/^	char buf[];$/;"	m	struct:sdshdr
bufpos	redis_hash.h	/^    int bufpos;$/;"	m	struct:redisClient
bulkhdr	redis_hash.h	/^    *bulkhdr[32];  \/* "$<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct
bulklen	redis_hash.h	/^    long bulklen;           \/* length of bulk argument in multi bulk request *\/$/;"	m	struct:redisClient
calls	redis_hash.h	/^	long long microseconds, calls;$/;"	m	struct:redisCommand
cmd	redis_hash.h	/^    struct redisCommand *cmd, *lastcmd;$/;"	m	struct:redisClient	typeref:struct:redisClient::redisCommand
cnegone	redis_hash.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
colon	redis_hash.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct
commandTableDictType	redis_hash.c	/^dictType commandTableDictType = {$/;"	v
cone	redis_hash.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
crlf	redis_hash.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
ctime	redis_hash.h	/^    time_t ctime;           \/* Client creation time *\/$/;"	m	struct:redisClient
czero	redis_hash.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
db	redis_hash.h	/^    redisDb *db;$/;"	m	struct:redisClient
del	redis_hash.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
dict	redis_hash.h	/^    dict *dict;                 \/* The keyspace for this DB *\/$/;"	m	struct:redisDb
dict	redis_hash.h	/^typedef struct dict {$/;"	s
dict	redis_hash.h	/^} dict;$/;"	t	typeref:struct:dict
dictAdd	redis_hash.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f
dictAddRaw	redis_hash.c	/^dictEntry *dictAddRaw(dict *d, void *key)$/;"	f
dictCompareKeys	redis_hash.h	22;"	d
dictCreate	redis_hash.c	/^dict *dictCreate(dictType *type, void *privDataPtr)$/;"	f
dictEntry	redis_hash.h	/^typedef struct dictEntry {$/;"	s
dictEntry	redis_hash.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictHashKey	redis_hash.c	/^unsigned int dictHashKey(const unsigned char* buf, int len) $/;"	f
dictSetKey	redis_hash.h	27;"	d
dictSetVal	redis_hash.h	34;"	d
dictType	redis_hash.h	/^typedef struct dictType {$/;"	s
dictType	redis_hash.h	/^} dictType;$/;"	t	typeref:struct:dictType
dict_hash_function_seed	redis_hash.c	/^static uint32_t dict_hash_function_seed = 5381;$/;"	v	file:
dictht	redis_hash.h	/^typedef struct dictht {$/;"	s
dictht	redis_hash.h	/^} dictht;$/;"	t	typeref:struct:dictht
dictid	redis_hash.h	/^    int dictid;$/;"	m	struct:redisClient
dup	redis_hash.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list
emptybulk	redis_hash.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
emptymultibulk	redis_hash.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
emptyscan	redis_hash.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct
encoding	redis_hash.h	/^    unsigned encoding:4;$/;"	m	struct:redisObject
err	redis_hash.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
execaborterr	redis_hash.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
expires	redis_hash.h	/^    dict *expires;              \/* Timeout of keys with a timeout set *\/$/;"	m	struct:redisDb
fd	redis_hash.h	/^    int fd;$/;"	m	struct:redisClient
firstkey	redis_hash.h	/^	int firstkey;$/;"	m	struct:redisCommand
flags	redis_hash.h	/^	int flags;$/;"	m	struct:redisCommand
flags	redis_hash.h	/^    int flags;              \/* REDIS_SLAVE | REDIS_MONITOR | REDIS_MULTI ... *\/$/;"	m	struct:redisClient
free	redis_hash.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
free	sds.h	/^	int free;$/;"	m	struct:sdshdr
getkeys_proc	redis_hash.h	/^	redisGetKeysProc *getkeys_proc;$/;"	m	struct:redisCommand
head	redis_hash.h	/^    listNode *head;$/;"	m	struct:list
ht	redis_hash.h	/^	dictht ht;$/;"	m	struct:dict
id	redis_hash.h	/^    int id;$/;"	m	struct:redisDb
id	redis_hash.h	/^    uint64_t id;            \/* Client incremental unique ID. *\/$/;"	m	struct:redisClient
integers	redis_hash.h	/^    *integers[10000],$/;"	m	struct:sharedObjectsStruct
iterators	redis_hash.h	/^	int iterators;$/;"	m	struct:dict
key	redis_hash.h	/^	void *key;$/;"	m	struct:dictEntry
keyCompare	redis_hash.h	/^	void *(*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	redis_hash.h	/^	void *(*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	redis_hash.h	/^	void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
keystep	redis_hash.h	/^	int keystep;$/;"	m	struct:redisCommand
lastcmd	redis_hash.h	/^    struct redisCommand *cmd, *lastcmd;$/;"	m	struct:redisClient	typeref:struct:redisClient::
lastinteraction	redis_hash.h	/^    time_t lastinteraction; \/* time of the last interaction, used for timeout *\/$/;"	m	struct:redisClient
lastkey	redis_hash.h	/^	int lastkey;$/;"	m	struct:redisCommand
len	redis_hash.h	/^    unsigned long len;$/;"	m	struct:list
len	sds.h	/^	int len;$/;"	m	struct:sdshdr
list	redis_hash.h	/^typedef struct list {$/;"	s
list	redis_hash.h	/^} list;$/;"	t	typeref:struct:list
listNode	redis_hash.h	/^typedef struct listNode {$/;"	s
listNode	redis_hash.h	/^} listNode;$/;"	t	typeref:struct:listNode
loadingerr	redis_hash.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
lpop	redis_hash.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
lpush	redis_hash.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct
lru	redis_hash.h	/^    unsigned lru:24; \/* lru time (relative to server.lruclock) *\/$/;"	m	struct:redisObject
main	redis_hash.c	/^int main(int argc, char* argv[])$/;"	f
main	sds.c	/^int main()$/;"	f
masterdownerr	redis_hash.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
match	redis_hash.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
maxstring	redis_hash.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct
mbulkhdr	redis_hash.h	/^    *mbulkhdr[32], \/* "*<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct
messagebulk	redis_hash.h	/^    *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
microseconds	redis_hash.h	/^	long long microseconds, calls;$/;"	m	struct:redisCommand
minstring	redis_hash.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct
multibulklen	redis_hash.h	/^    int multibulklen;       \/* number of multi bulk arguments left to read *\/$/;"	m	struct:redisClient
name	redis_hash.h	/^	char name[20];$/;"	m	struct:redisCommand
name	redis_hash.h	/^    robj *name;             \/* As set by CLIENT SETNAME *\/$/;"	m	struct:redisClient
next	redis_hash.h	/^	struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
next	redis_hash.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
noautherr	redis_hash.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
nokeyerr	redis_hash.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
noreplicaserr	redis_hash.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
noscripterr	redis_hash.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
nullbulk	redis_hash.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct
nullmultibulk	redis_hash.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct
obuf_soft_limit_reached_time	redis_hash.h	/^    time_t obuf_soft_limit_reached_time;$/;"	m	struct:redisClient
ok	redis_hash.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
oomerr	redis_hash.h	/^    *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
outofrangeerr	redis_hash.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
peerid	redis_hash.h	/^    sds peerid;             \/* Cached peer ID. *\/$/;"	m	struct:redisClient
plus	redis_hash.h	/^    *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
pmessagebulk	redis_hash.h	/^    *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
pong	redis_hash.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
populateCommandTable	redis_hash.c	/^void populateCommandTable(void) $/;"	f
prev	redis_hash.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
privdata	redis_hash.h	/^	void *privdata;$/;"	m	struct:dict
proc	redis_hash.h	/^	redisCommandProc *proc;$/;"	m	struct:redisCommand
psubscribebulk	redis_hash.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
ptr	redis_hash.h	/^    void *ptr;$/;"	m	struct:redisObject
punsubscribebulk	redis_hash.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
querybuf	redis_hash.h	/^    sds querybuf;$/;"	m	struct:redisClient
querybuf_peak	redis_hash.h	/^    size_t querybuf_peak;   \/* Recent (100ms or more) peak of querybuf size *\/$/;"	m	struct:redisClient
queued	redis_hash.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct
ready_keys	redis_hash.h	/^    dict *ready_keys;           \/* Blocked keys that received a PUSH *\/$/;"	m	struct:redisDb
redisClient	redis_hash.h	/^typedef struct redisClient {$/;"	s
redisCommand	redis_hash.h	/^struct redisCommand {$/;"	s
redisCommandProc	redis_hash.h	/^typedef void redisCommandProc(redisClient *c);$/;"	t
redisDb	redis_hash.h	/^typedef struct redisDb {$/;"	s
redisDb	redis_hash.h	/^} redisDb;$/;"	t	typeref:struct:redisDb
redisGetkeysProc	redis_hash.h	/^typedef int *redisGetkeysProc(struct redisCommand *cmd, robj **argv, int argc, int *numkeys, int flags);$/;"	t
redisObject	redis_hash.h	/^typedef struct redisObject {$/;"	s
refcount	redis_hash.h	/^    int refcount;$/;"	m	struct:redisObject
repl_ack_off	redis_hash.h	/^    long long repl_ack_off; \/* replication ack offset, if this is a slave *\/$/;"	m	struct:redisClient
repl_ack_time	redis_hash.h	/^    long long repl_ack_time;\/* replication ack time, if this is a slave *\/$/;"	m	struct:redisClient
repldbfd	redis_hash.h	/^    int repldbfd;           \/* replication DB file descriptor *\/$/;"	m	struct:redisClient
repldboff	redis_hash.h	/^    off_t repldboff;        \/* replication DB file offset *\/$/;"	m	struct:redisClient
repldbsize	redis_hash.h	/^    off_t repldbsize;       \/* replication DB file size *\/$/;"	m	struct:redisClient
reploff	redis_hash.h	/^    long long reploff;      \/* replication offset if this is our master *\/$/;"	m	struct:redisClient
replrunid	redis_hash.h	/^    char replrunid[41]; \/* master run id if this is a master *\/$/;"	m	struct:redisClient
replstate	redis_hash.h	/^    int replstate;          \/* replication state if this is a slave *\/$/;"	m	struct:redisClient
reply	redis_hash.h	/^    list *reply;$/;"	m	struct:redisClient
reply_bytes	redis_hash.h	/^    unsigned long reply_bytes; \/* Tot bytes of objects in reply list *\/$/;"	m	struct:redisClient
reqtype	redis_hash.h	/^    int reqtype;$/;"	m	struct:redisClient
robj	redis_hash.h	/^} robj;$/;"	t	typeref:struct:redisObject
roslaveerr	redis_hash.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
rpop	redis_hash.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
s64	redis_hash.h	/^		int64_t s64;$/;"	m	union:dictEntry::__anon1
sameobjecterr	redis_hash.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
sds	sds.c	/^typedef char *sds;$/;"	t	file:
sdshdr	sds.h	/^struct sdshdr {$/;"	s
sdsnew	sds.c	/^sds sdsnew(const char* init)$/;"	f
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen)$/;"	f
select	redis_hash.h	/^    *select[10],$/;"	m	struct:sharedObjectsStruct
sentlen	redis_hash.h	/^    int sentlen;            \/* Amount of bytes already sent in the current$/;"	m	struct:redisClient
sflags	redis_hash.h	/^	char *sflags;$/;"	m	struct:redisCommand
shared	redis_hash.c	/^struct sharedObjectsStruct shared;$/;"	v	typeref:struct:sharedObjectsStruct
sharedObjectsStruct	redis_hash.h	/^struct sharedObjectsStruct {$/;"	s
size	redis_hash.h	/^	unsigned long size;$/;"	m	struct:dictht
sizemask	redis_hash.h	/^	unsigned long sizemask;$/;"	m	struct:dictht
slave_listening_port	redis_hash.h	/^    int slave_listening_port; \/* As configured with: SLAVECONF listening-port *\/$/;"	m	struct:redisClient
slowscripterr	redis_hash.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
space	redis_hash.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
subscribebulk	redis_hash.h	/^    *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
syntaxerr	redis_hash.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
table	redis_hash.h	/^	dictEntry ** table;$/;"	m	struct:dictht
tail	redis_hash.h	/^    listNode *tail;$/;"	m	struct:list
type	redis_hash.h	/^	dictType *type;$/;"	m	struct:dict
type	redis_hash.h	/^    unsigned type:4;$/;"	m	struct:redisObject
u64	redis_hash.h	/^		uint64_t u64;$/;"	m	union:dictEntry::__anon1
unsubscribebulk	redis_hash.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
used	redis_hash.h	/^	unsigned long used;$/;"	m	struct:dictht
v	redis_hash.h	/^	} v;$/;"	m	struct:dictEntry	typeref:union:dictEntry::__anon1
val	redis_hash.h	/^		void *val;$/;"	m	union:dictEntry::__anon1
valDestructor	redis_hash.h	/^	void *(*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	redis_hash.h	/^	void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
value	redis_hash.h	/^    void *value;$/;"	m	struct:listNode
watched_keys	redis_hash.h	/^    dict *watched_keys;         \/* WATCHED keys for MULTI\/EXEC CAS *\/$/;"	m	struct:redisDb
wrongtypeerr	redis_hash.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
