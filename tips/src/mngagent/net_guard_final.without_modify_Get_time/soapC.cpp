/* soapC.cpp
   Generated by gSOAP 2.8.14 from ssl.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.14 2013-03-31 11:10:41 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLong:
		return soap_in_unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_ns__GetData:
		return soap_in_ns__GetData(soap, NULL, NULL, "ns:GetData");
	case SOAP_TYPE_ns__GetDataResponse:
		return soap_in_ns__GetDataResponse(soap, NULL, NULL, "ns:GetDataResponse");
	case SOAP_TYPE_ns__PutData:
		return soap_in_ns__PutData(soap, NULL, NULL, "ns:PutData");
	case SOAP_TYPE_ns__PutDataResponse:
		return soap_in_ns__PutDataResponse(soap, NULL, NULL, "ns:PutDataResponse");
	case SOAP_TYPE_x__Keys:
		return soap_in_x__Keys(soap, NULL, NULL, "x:Keys");
	case SOAP_TYPE_x__DataSet:
		return soap_in_x__DataSet(soap, NULL, NULL, "x:DataSet");
	case SOAP_TYPE_x__Data:
		return soap_in_x__Data(soap, NULL, NULL, "x:Data");
	case SOAP_TYPE_ns__upload_message:
		return soap_in_ns__upload_message(soap, NULL, NULL, "ns:upload-message");
	case SOAP_TYPE_ns__upload_messageResponse:
		return soap_in_ns__upload_messageResponse(soap, NULL, NULL, "ns:upload-messageResponse");
	case SOAP_TYPE_ns__ResultList:
		return soap_in_ns__ResultList(soap, NULL, NULL, "ns:ResultList");
	case SOAP_TYPE_ns__ResultItem:
		return soap_in_ns__ResultItem(soap, NULL, NULL, "ns:ResultItem");
	case SOAP_TYPE_ns__MsgList:
		return soap_in_ns__MsgList(soap, NULL, NULL, "ns:MsgList");
	case SOAP_TYPE_ns__MsgItem:
		return soap_in_ns__MsgItem(soap, NULL, NULL, "ns:MsgItem");
	case SOAP_TYPE_xmime5__base64Binary:
		return soap_in_xmime5__base64Binary(soap, NULL, NULL, "xmime5:base64Binary");
	case SOAP_TYPE_PointerTons__GetDataResponse:
		return soap_in_PointerTons__GetDataResponse(soap, NULL, NULL, "ns:GetDataResponse");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTox__Keys:
		return soap_in_PointerTox__Keys(soap, NULL, NULL, "x:Keys");
	case SOAP_TYPE_PointerTox__DataSet:
		return soap_in_PointerTox__DataSet(soap, NULL, NULL, "x:DataSet");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTox__Data:
		return soap_in_PointerTox__Data(soap, NULL, NULL, "x:Data");
	case SOAP_TYPE_PointerTons__ResultList:
		return soap_in_PointerTons__ResultList(soap, NULL, NULL, "ns:ResultList");
	case SOAP_TYPE_PointerTons__MsgList:
		return soap_in_PointerTons__MsgList(soap, NULL, NULL, "ns:MsgList");
	case SOAP_TYPE_PointerToPointerTons__ResultItem:
		return soap_in_PointerToPointerTons__ResultItem(soap, NULL, NULL, "ns:ResultItem");
	case SOAP_TYPE_PointerTons__ResultItem:
		return soap_in_PointerTons__ResultItem(soap, NULL, NULL, "ns:ResultItem");
	case SOAP_TYPE_PointerTons__MsgItem:
		return soap_in_PointerTons__MsgItem(soap, NULL, NULL, "ns:MsgItem");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLong;
			return soap_in_unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GetData"))
		{	*type = SOAP_TYPE_ns__GetData;
			return soap_in_ns__GetData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GetDataResponse"))
		{	*type = SOAP_TYPE_ns__GetDataResponse;
			return soap_in_ns__GetDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:PutData"))
		{	*type = SOAP_TYPE_ns__PutData;
			return soap_in_ns__PutData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:PutDataResponse"))
		{	*type = SOAP_TYPE_ns__PutDataResponse;
			return soap_in_ns__PutDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "x:Keys"))
		{	*type = SOAP_TYPE_x__Keys;
			return soap_in_x__Keys(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "x:DataSet"))
		{	*type = SOAP_TYPE_x__DataSet;
			return soap_in_x__DataSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "x:Data"))
		{	*type = SOAP_TYPE_x__Data;
			return soap_in_x__Data(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:upload-message"))
		{	*type = SOAP_TYPE_ns__upload_message;
			return soap_in_ns__upload_message(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:upload-messageResponse"))
		{	*type = SOAP_TYPE_ns__upload_messageResponse;
			return soap_in_ns__upload_messageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ResultList"))
		{	*type = SOAP_TYPE_ns__ResultList;
			return soap_in_ns__ResultList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:ResultItem"))
		{	*type = SOAP_TYPE_ns__ResultItem;
			return soap_in_ns__ResultItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:MsgList"))
		{	*type = SOAP_TYPE_ns__MsgList;
			return soap_in_ns__MsgList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:MsgItem"))
		{	*type = SOAP_TYPE_ns__MsgItem;
			return soap_in_ns__MsgItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xmime5:base64Binary"))
		{	*type = SOAP_TYPE_xmime5__base64Binary;
			return soap_in_xmime5__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "xop:Include"))
		{	*type = SOAP_TYPE__xop__Include;
			return soap_in__xop__Include(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__double:
		return soap_out_xsd__double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLong:
		return soap_out_unsignedLong(soap, tag, id, (const unsigned long *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_ns__GetData:
		return soap_out_ns__GetData(soap, tag, id, (const struct ns__GetData *)ptr, "ns:GetData");
	case SOAP_TYPE_ns__GetDataResponse:
		return soap_out_ns__GetDataResponse(soap, tag, id, (const struct ns__GetDataResponse *)ptr, "ns:GetDataResponse");
	case SOAP_TYPE_ns__PutData:
		return soap_out_ns__PutData(soap, tag, id, (const struct ns__PutData *)ptr, "ns:PutData");
	case SOAP_TYPE_ns__PutDataResponse:
		return soap_out_ns__PutDataResponse(soap, tag, id, (const struct ns__PutDataResponse *)ptr, "ns:PutDataResponse");
	case SOAP_TYPE_x__Keys:
		return soap_out_x__Keys(soap, tag, id, (const struct x__Keys *)ptr, "x:Keys");
	case SOAP_TYPE_x__DataSet:
		return soap_out_x__DataSet(soap, tag, id, (const struct x__DataSet *)ptr, "x:DataSet");
	case SOAP_TYPE_x__Data:
		return soap_out_x__Data(soap, tag, id, (const struct x__Data *)ptr, "x:Data");
	case SOAP_TYPE_ns__upload_message:
		return soap_out_ns__upload_message(soap, tag, id, (const struct ns__upload_message *)ptr, "ns:upload-message");
	case SOAP_TYPE_ns__upload_messageResponse:
		return soap_out_ns__upload_messageResponse(soap, tag, id, (const struct ns__upload_messageResponse *)ptr, "ns:upload-messageResponse");
	case SOAP_TYPE_ns__ResultList:
		return soap_out_ns__ResultList(soap, tag, id, (const struct ns__ResultList *)ptr, "ns:ResultList");
	case SOAP_TYPE_ns__ResultItem:
		return soap_out_ns__ResultItem(soap, tag, id, (const struct ns__ResultItem *)ptr, "ns:ResultItem");
	case SOAP_TYPE_ns__MsgList:
		return soap_out_ns__MsgList(soap, tag, id, (const struct ns__MsgList *)ptr, "ns:MsgList");
	case SOAP_TYPE_ns__MsgItem:
		return soap_out_ns__MsgItem(soap, tag, id, (const struct ns__MsgItem *)ptr, "ns:MsgItem");
	case SOAP_TYPE_xmime5__base64Binary:
		return soap_out_xmime5__base64Binary(soap, tag, id, (const struct xmime5__base64Binary *)ptr, "xmime5:base64Binary");
	case SOAP_TYPE__xop__Include:
		return soap_out__xop__Include(soap, "xop:Include", id, (const struct _xop__Include *)ptr, NULL);
	case SOAP_TYPE_PointerTons__GetDataResponse:
		return soap_out_PointerTons__GetDataResponse(soap, tag, id, (struct ns__GetDataResponse *const*)ptr, "ns:GetDataResponse");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTox__Keys:
		return soap_out_PointerTox__Keys(soap, tag, id, (struct x__Keys *const*)ptr, "x:Keys");
	case SOAP_TYPE_PointerTox__DataSet:
		return soap_out_PointerTox__DataSet(soap, tag, id, (struct x__DataSet *const*)ptr, "x:DataSet");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTox__Data:
		return soap_out_PointerTox__Data(soap, tag, id, (struct x__Data *const*)ptr, "x:Data");
	case SOAP_TYPE_PointerTons__ResultList:
		return soap_out_PointerTons__ResultList(soap, tag, id, (struct ns__ResultList *const*)ptr, "ns:ResultList");
	case SOAP_TYPE_PointerTons__MsgList:
		return soap_out_PointerTons__MsgList(soap, tag, id, (struct ns__MsgList *const*)ptr, "ns:MsgList");
	case SOAP_TYPE_PointerToPointerTons__ResultItem:
		return soap_out_PointerToPointerTons__ResultItem(soap, tag, id, (struct ns__ResultItem **const*)ptr, "ns:ResultItem");
	case SOAP_TYPE_PointerTons__ResultItem:
		return soap_out_PointerTons__ResultItem(soap, tag, id, (struct ns__ResultItem *const*)ptr, "ns:ResultItem");
	case SOAP_TYPE_PointerTons__MsgItem:
		return soap_out_PointerTons__MsgItem(soap, tag, id, (struct ns__MsgItem *const*)ptr, "ns:MsgItem");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__GetData:
		soap_serialize_ns__GetData(soap, (const struct ns__GetData *)ptr);
		break;
	case SOAP_TYPE_ns__GetDataResponse:
		soap_serialize_ns__GetDataResponse(soap, (const struct ns__GetDataResponse *)ptr);
		break;
	case SOAP_TYPE_ns__PutData:
		soap_serialize_ns__PutData(soap, (const struct ns__PutData *)ptr);
		break;
	case SOAP_TYPE_ns__PutDataResponse:
		soap_serialize_ns__PutDataResponse(soap, (const struct ns__PutDataResponse *)ptr);
		break;
	case SOAP_TYPE_x__Keys:
		soap_serialize_x__Keys(soap, (const struct x__Keys *)ptr);
		break;
	case SOAP_TYPE_x__DataSet:
		soap_serialize_x__DataSet(soap, (const struct x__DataSet *)ptr);
		break;
	case SOAP_TYPE_x__Data:
		soap_serialize_x__Data(soap, (const struct x__Data *)ptr);
		break;
	case SOAP_TYPE_ns__upload_message:
		soap_serialize_ns__upload_message(soap, (const struct ns__upload_message *)ptr);
		break;
	case SOAP_TYPE_ns__upload_messageResponse:
		soap_serialize_ns__upload_messageResponse(soap, (const struct ns__upload_messageResponse *)ptr);
		break;
	case SOAP_TYPE_ns__ResultList:
		soap_serialize_ns__ResultList(soap, (const struct ns__ResultList *)ptr);
		break;
	case SOAP_TYPE_ns__ResultItem:
		soap_serialize_ns__ResultItem(soap, (const struct ns__ResultItem *)ptr);
		break;
	case SOAP_TYPE_ns__MsgList:
		soap_serialize_ns__MsgList(soap, (const struct ns__MsgList *)ptr);
		break;
	case SOAP_TYPE_ns__MsgItem:
		soap_serialize_ns__MsgItem(soap, (const struct ns__MsgItem *)ptr);
		break;
	case SOAP_TYPE_xmime5__base64Binary:
		soap_serialize_xmime5__base64Binary(soap, (const struct xmime5__base64Binary *)ptr);
		break;
	case SOAP_TYPE__xop__Include:
		soap_serialize__xop__Include(soap, (const struct _xop__Include *)ptr);
		break;
	case SOAP_TYPE_PointerTons__GetDataResponse:
		soap_serialize_PointerTons__GetDataResponse(soap, (struct ns__GetDataResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTox__Keys:
		soap_serialize_PointerTox__Keys(soap, (struct x__Keys *const*)ptr);
		break;
	case SOAP_TYPE_PointerTox__DataSet:
		soap_serialize_PointerTox__DataSet(soap, (struct x__DataSet *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerTox__Data:
		soap_serialize_PointerTox__Data(soap, (struct x__Data *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ResultList:
		soap_serialize_PointerTons__ResultList(soap, (struct ns__ResultList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__MsgList:
		soap_serialize_PointerTons__MsgList(soap, (struct ns__MsgList *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons__ResultItem:
		soap_serialize_PointerToPointerTons__ResultItem(soap, (struct ns__ResultItem **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__ResultItem:
		soap_serialize_PointerTons__ResultItem(soap, (struct ns__ResultItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__MsgItem:
		soap_serialize_PointerTons__MsgItem(soap, (struct ns__MsgItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE__xop__Include:
		return (void*)soap_instantiate__xop__Include(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xmime5__base64Binary:
		return (void*)soap_instantiate_xmime5__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__MsgItem:
		return (void*)soap_instantiate_ns__MsgItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__MsgList:
		return (void*)soap_instantiate_ns__MsgList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ResultItem:
		return (void*)soap_instantiate_ns__ResultItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__ResultList:
		return (void*)soap_instantiate_ns__ResultList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__upload_messageResponse:
		return (void*)soap_instantiate_ns__upload_messageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__upload_message:
		return (void*)soap_instantiate_ns__upload_message(soap, -1, type, arrayType, n);
	case SOAP_TYPE_x__Data:
		return (void*)soap_instantiate_x__Data(soap, -1, type, arrayType, n);
	case SOAP_TYPE_x__DataSet:
		return (void*)soap_instantiate_x__DataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_x__Keys:
		return (void*)soap_instantiate_x__Keys(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__PutDataResponse:
		return (void*)soap_instantiate_ns__PutDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__PutData:
		return (void*)soap_instantiate_ns__PutData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__GetDataResponse:
		return (void*)soap_instantiate_ns__GetDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__GetData:
		return (void*)soap_instantiate_ns__GetData(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE__xop__Include:
		if (p->size < 0)
			SOAP_DELETE((struct _xop__Include*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct _xop__Include*)p->ptr);
		break;
	case SOAP_TYPE_xmime5__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((struct xmime5__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct xmime5__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_ns__MsgItem:
		if (p->size < 0)
			SOAP_DELETE((struct ns__MsgItem*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__MsgItem*)p->ptr);
		break;
	case SOAP_TYPE_ns__MsgList:
		if (p->size < 0)
			SOAP_DELETE((struct ns__MsgList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__MsgList*)p->ptr);
		break;
	case SOAP_TYPE_ns__ResultItem:
		if (p->size < 0)
			SOAP_DELETE((struct ns__ResultItem*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__ResultItem*)p->ptr);
		break;
	case SOAP_TYPE_ns__ResultList:
		if (p->size < 0)
			SOAP_DELETE((struct ns__ResultList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__ResultList*)p->ptr);
		break;
	case SOAP_TYPE_ns__upload_messageResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__upload_messageResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__upload_messageResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__upload_message:
		if (p->size < 0)
			SOAP_DELETE((struct ns__upload_message*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__upload_message*)p->ptr);
		break;
	case SOAP_TYPE_x__Data:
		if (p->size < 0)
			SOAP_DELETE((struct x__Data*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct x__Data*)p->ptr);
		break;
	case SOAP_TYPE_x__DataSet:
		if (p->size < 0)
			SOAP_DELETE((struct x__DataSet*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct x__DataSet*)p->ptr);
		break;
	case SOAP_TYPE_x__Keys:
		if (p->size < 0)
			SOAP_DELETE((struct x__Keys*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct x__Keys*)p->ptr);
		break;
	case SOAP_TYPE_ns__PutDataResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__PutDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__PutDataResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__PutData:
		if (p->size < 0)
			SOAP_DELETE((struct ns__PutData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__PutData*)p->ptr);
		break;
	case SOAP_TYPE_ns__GetDataResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GetDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GetDataResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__GetData:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GetData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GetData*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{	long *p;
	p = soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_long);
	if (soap_out_long(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_xsd__double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__double);
	if (soap_out_xsd__double(soap, tag?tag:"xsd:double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLong(struct soap *soap, unsigned long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLong
	*a = SOAP_DEFAULT_unsignedLong;
#else
	*a = (unsigned long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLong(struct soap *soap, const char *tag, int id, const unsigned long *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedLong(soap, tag, id, a, type, SOAP_TYPE_unsignedLong);
}

SOAP_FMAC3 unsigned long * SOAP_FMAC4 soap_in_unsignedLong(struct soap *soap, const char *tag, unsigned long *a, const char *type)
{	unsigned long *p;
	p = soap_inunsignedLong(soap, tag, a, type, SOAP_TYPE_unsignedLong);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLong(struct soap *soap, const unsigned long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedLong);
	if (soap_out_unsignedLong(soap, tag?tag:"unsignedLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned long * SOAP_FMAC4 soap_get_unsignedLong(struct soap *soap, unsigned long *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetData(struct soap *soap, struct ns__GetData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->x__keys = NULL;
	soap_default_string(soap, &a->device_id);
	soap_default_string(soap, &a->authstr);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetData(struct soap *soap, const struct ns__GetData *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTox__Keys(soap, &a->x__keys);
	soap_serialize_string(soap, &a->device_id);
	soap_serialize_string(soap, &a->authstr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetData(struct soap *soap, const char *tag, int id, const struct ns__GetData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__GetData), type))
		return soap->error;
	if (soap_out_PointerTox__Keys(soap, "x:keys", -1, &a->x__keys, ""))
		return soap->error;
	if (soap_out_string(soap, "device-id", -1, &a->device_id, ""))
		return soap->error;
	if (soap_out_string(soap, "authstr", -1, &a->authstr, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GetData * SOAP_FMAC4 soap_in_ns__GetData(struct soap *soap, const char *tag, struct ns__GetData *a, const char *type)
{
	size_t soap_flag_x__keys = 1;
	size_t soap_flag_device_id = 1;
	size_t soap_flag_authstr = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GetData *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__GetData, sizeof(struct ns__GetData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__GetData(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_x__keys && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTox__Keys(soap, "x:keys", &a->x__keys, "x:Keys"))
				{	soap_flag_x__keys--;
					continue;
				}
			if (soap_flag_device_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "device-id", &a->device_id, "xsd:string"))
				{	soap_flag_device_id--;
					continue;
				}
			if (soap_flag_authstr && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "authstr", &a->authstr, "xsd:string"))
				{	soap_flag_authstr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GetData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__GetData, 0, sizeof(struct ns__GetData), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetData(struct soap *soap, const struct ns__GetData *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__GetData);
	if (soap_out_ns__GetData(soap, tag?tag:"ns:GetData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetData * SOAP_FMAC4 soap_get_ns__GetData(struct soap *soap, struct ns__GetData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GetData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GetData * SOAP_FMAC2 soap_instantiate_ns__GetData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GetData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__GetData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GetData);
		if (size)
			*size = sizeof(struct ns__GetData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GetData, n);
		if (size)
			*size = n * sizeof(struct ns__GetData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GetData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GetData %p -> %p\n", q, p));
	*(struct ns__GetData*)p = *(struct ns__GetData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetDataResponse(struct soap *soap, struct ns__GetDataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_x__DataSet(soap, &a->x__data);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetDataResponse(struct soap *soap, const struct ns__GetDataResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->x__data, SOAP_TYPE_x__DataSet);
	soap_serialize_x__DataSet(soap, &a->x__data);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetDataResponse(struct soap *soap, const char *tag, int id, const struct ns__GetDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__GetDataResponse), type))
		return soap->error;
	soap_element_result(soap, "x:data");
	if (soap_out_x__DataSet(soap, "x:data", -1, &a->x__data, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GetDataResponse * SOAP_FMAC4 soap_in_ns__GetDataResponse(struct soap *soap, const char *tag, struct ns__GetDataResponse *a, const char *type)
{
	size_t soap_flag_x__data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GetDataResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__GetDataResponse, sizeof(struct ns__GetDataResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__GetDataResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_x__data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_x__DataSet(soap, "x:data", &a->x__data, "x:DataSet"))
				{	soap_flag_x__data--;
					continue;
				}
			soap_check_result(soap, "x:data");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GetDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__GetDataResponse, 0, sizeof(struct ns__GetDataResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_x__data > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetDataResponse(struct soap *soap, const struct ns__GetDataResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__GetDataResponse);
	if (soap_out_ns__GetDataResponse(soap, tag?tag:"ns:GetDataResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetDataResponse * SOAP_FMAC4 soap_get_ns__GetDataResponse(struct soap *soap, struct ns__GetDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GetDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GetDataResponse * SOAP_FMAC2 soap_instantiate_ns__GetDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GetDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__GetDataResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GetDataResponse);
		if (size)
			*size = sizeof(struct ns__GetDataResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GetDataResponse, n);
		if (size)
			*size = n * sizeof(struct ns__GetDataResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GetDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GetDataResponse %p -> %p\n", q, p));
	*(struct ns__GetDataResponse*)p = *(struct ns__GetDataResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__PutData(struct soap *soap, struct ns__PutData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->x__data = NULL;
	a->x__keys = NULL;
	soap_default_string(soap, &a->device_id);
	soap_default_string(soap, &a->authstr);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__PutData(struct soap *soap, const struct ns__PutData *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTox__DataSet(soap, &a->x__data);
	soap_serialize_PointerTox__Keys(soap, &a->x__keys);
	soap_serialize_string(soap, &a->device_id);
	soap_serialize_string(soap, &a->authstr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__PutData(struct soap *soap, const char *tag, int id, const struct ns__PutData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__PutData), type))
		return soap->error;
	if (soap_out_PointerTox__DataSet(soap, "x:data", -1, &a->x__data, ""))
		return soap->error;
	if (soap_out_PointerTox__Keys(soap, "x:keys", -1, &a->x__keys, ""))
		return soap->error;
	if (soap_out_string(soap, "device-id", -1, &a->device_id, ""))
		return soap->error;
	if (soap_out_string(soap, "authstr", -1, &a->authstr, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__PutData * SOAP_FMAC4 soap_in_ns__PutData(struct soap *soap, const char *tag, struct ns__PutData *a, const char *type)
{
	size_t soap_flag_x__data = 1;
	size_t soap_flag_x__keys = 1;
	size_t soap_flag_device_id = 1;
	size_t soap_flag_authstr = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__PutData *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__PutData, sizeof(struct ns__PutData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__PutData(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_x__data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTox__DataSet(soap, "x:data", &a->x__data, "x:DataSet"))
				{	soap_flag_x__data--;
					continue;
				}
			if (soap_flag_x__keys && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTox__Keys(soap, "x:keys", &a->x__keys, "x:Keys"))
				{	soap_flag_x__keys--;
					continue;
				}
			if (soap_flag_device_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "device-id", &a->device_id, "xsd:string"))
				{	soap_flag_device_id--;
					continue;
				}
			if (soap_flag_authstr && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "authstr", &a->authstr, "xsd:string"))
				{	soap_flag_authstr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__PutData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__PutData, 0, sizeof(struct ns__PutData), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__PutData(struct soap *soap, const struct ns__PutData *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__PutData);
	if (soap_out_ns__PutData(soap, tag?tag:"ns:PutData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__PutData * SOAP_FMAC4 soap_get_ns__PutData(struct soap *soap, struct ns__PutData *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__PutData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__PutData * SOAP_FMAC2 soap_instantiate_ns__PutData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__PutData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__PutData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__PutData);
		if (size)
			*size = sizeof(struct ns__PutData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__PutData, n);
		if (size)
			*size = n * sizeof(struct ns__PutData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__PutData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__PutData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__PutData %p -> %p\n", q, p));
	*(struct ns__PutData*)p = *(struct ns__PutData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__PutDataResponse(struct soap *soap, struct ns__PutDataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__PutDataResponse(struct soap *soap, const struct ns__PutDataResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->response);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__PutDataResponse(struct soap *soap, const char *tag, int id, const struct ns__PutDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__PutDataResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "response", -1, &a->response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__PutDataResponse * SOAP_FMAC4 soap_in_ns__PutDataResponse(struct soap *soap, const char *tag, struct ns__PutDataResponse *a, const char *type)
{
	size_t soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__PutDataResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__PutDataResponse, sizeof(struct ns__PutDataResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__PutDataResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "response", &a->response, "xsd:int"))
				{	soap_flag_response--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__PutDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__PutDataResponse, 0, sizeof(struct ns__PutDataResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__PutDataResponse(struct soap *soap, const struct ns__PutDataResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__PutDataResponse);
	if (soap_out_ns__PutDataResponse(soap, tag?tag:"ns:PutDataResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__PutDataResponse * SOAP_FMAC4 soap_get_ns__PutDataResponse(struct soap *soap, struct ns__PutDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__PutDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__PutDataResponse * SOAP_FMAC2 soap_instantiate_ns__PutDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__PutDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__PutDataResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__PutDataResponse);
		if (size)
			*size = sizeof(struct ns__PutDataResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__PutDataResponse, n);
		if (size)
			*size = n * sizeof(struct ns__PutDataResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__PutDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__PutDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__PutDataResponse %p -> %p\n", q, p));
	*(struct ns__PutDataResponse*)p = *(struct ns__PutDataResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_x__Keys(struct soap *soap, struct x__Keys *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->key = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_x__Keys(struct soap *soap, const struct x__Keys *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	if (a->key)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_serialize_string(soap, a->key + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_x__Keys(struct soap *soap, const char *tag, int id, const struct x__Keys *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_x__Keys), type))
		return soap->error;
	if (a->key)
	{	int i;
		for (i = 0; i < a->__size; i++)
			if (soap_out_string(soap, "x:key", -1, a->key + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct x__Keys * SOAP_FMAC4 soap_in_x__Keys(struct soap *soap, const char *tag, struct x__Keys *a, const char *type)
{
	struct soap_blist *soap_blist_key = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct x__Keys *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_x__Keys, sizeof(struct x__Keys), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_x__Keys(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "x:key", 1, NULL))
			{	if (a->key == NULL)
				{	if (soap_blist_key == NULL)
						soap_blist_key = soap_new_block(soap);
					a->key = (char **)soap_push_block(soap, soap_blist_key, sizeof(char *));
					if (a->key == NULL)
						return NULL;
					*a->key = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "x:key", a->key, "xsd:string"))
				{	a->__size++;
					a->key = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->key)
			soap_pop_block(soap, soap_blist_key);
		if (a->__size)
			a->key = (char **)soap_save_block(soap, soap_blist_key, NULL, 1);
		else
		{	a->key = NULL;
			if (soap_blist_key)
				soap_end_block(soap, soap_blist_key);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct x__Keys *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_x__Keys, 0, sizeof(struct x__Keys), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_x__Keys(struct soap *soap, const struct x__Keys *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_x__Keys);
	if (soap_out_x__Keys(soap, tag?tag:"x:Keys", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct x__Keys * SOAP_FMAC4 soap_get_x__Keys(struct soap *soap, struct x__Keys *p, const char *tag, const char *type)
{
	if ((p = soap_in_x__Keys(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct x__Keys * SOAP_FMAC2 soap_instantiate_x__Keys(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_x__Keys(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_x__Keys, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct x__Keys);
		if (size)
			*size = sizeof(struct x__Keys);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct x__Keys, n);
		if (size)
			*size = n * sizeof(struct x__Keys);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct x__Keys*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_x__Keys(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct x__Keys %p -> %p\n", q, p));
	*(struct x__Keys*)p = *(struct x__Keys*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_x__DataSet(struct soap *soap, struct x__DataSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->item = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_x__DataSet(struct soap *soap, const struct x__DataSet *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	if (a->item)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_embedded(soap, a->item + i, SOAP_TYPE_x__Data);
			soap_serialize_x__Data(soap, a->item + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_x__DataSet(struct soap *soap, const char *tag, int id, const struct x__DataSet *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_x__DataSet), type))
		return soap->error;
	if (a->item)
	{	int i;
		for (i = 0; i < a->__size; i++)
			if (soap_out_x__Data(soap, "x:item", -1, a->item + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct x__DataSet * SOAP_FMAC4 soap_in_x__DataSet(struct soap *soap, const char *tag, struct x__DataSet *a, const char *type)
{
	struct soap_blist *soap_blist_item = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct x__DataSet *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_x__DataSet, sizeof(struct x__DataSet), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_x__DataSet(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "x:item", 1, NULL))
			{	if (a->item == NULL)
				{	if (soap_blist_item == NULL)
						soap_blist_item = soap_new_block(soap);
					a->item = (struct x__Data *)soap_push_block(soap, soap_blist_item, sizeof(struct x__Data));
					if (a->item == NULL)
						return NULL;
					SOAP_PLACEMENT_NEW(a->item, struct x__Data);
					soap_default_x__Data(soap, a->item);
				}
				soap_revert(soap);
				if (soap_in_x__Data(soap, "x:item", a->item, "x:Data"))
				{	a->__size++;
					a->item = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->item)
			soap_pop_block(soap, soap_blist_item);
		if (a->__size)
			a->item = (struct x__Data *)soap_save_block(soap, soap_blist_item, NULL, 1);
		else
		{	a->item = NULL;
			if (soap_blist_item)
				soap_end_block(soap, soap_blist_item);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct x__DataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_x__DataSet, 0, sizeof(struct x__DataSet), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_x__DataSet(struct soap *soap, const struct x__DataSet *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_x__DataSet);
	if (soap_out_x__DataSet(soap, tag?tag:"x:DataSet", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct x__DataSet * SOAP_FMAC4 soap_get_x__DataSet(struct soap *soap, struct x__DataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in_x__DataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct x__DataSet * SOAP_FMAC2 soap_instantiate_x__DataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_x__DataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_x__DataSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct x__DataSet);
		if (size)
			*size = sizeof(struct x__DataSet);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct x__DataSet, n);
		if (size)
			*size = n * sizeof(struct x__DataSet);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct x__DataSet*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_x__DataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct x__DataSet %p -> %p\n", q, p));
	*(struct x__DataSet*)p = *(struct x__DataSet*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_x__Data(struct soap *soap, struct x__Data *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__xop__Include(soap, &a->xop__Include);
	soap_default_string(soap, &a->xmime5__contentType);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_x__Data(struct soap *soap, const struct x__Data *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__xop__Include(soap, &a->xop__Include);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_x__Data(struct soap *soap, const char *tag, int id, const struct x__Data *a, const char *type)
{
	if (a->xmime5__contentType)
		soap_set_attr(soap, "xmime5:contentType", a->xmime5__contentType, 1);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_x__Data), type))
		return soap->error;
	if (soap_out__xop__Include(soap, "xop:Include", -1, &a->xop__Include, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct x__Data * SOAP_FMAC4 soap_in_x__Data(struct soap *soap, const char *tag, struct x__Data *a, const char *type)
{
	size_t soap_flag_xop__Include = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct x__Data *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_x__Data, sizeof(struct x__Data), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_x__Data(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "xmime5:contentType", 0), &a->xmime5__contentType, 0, -1))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xop__Include && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__xop__Include(soap, "xop:Include", &a->xop__Include, ""))
				{	soap_flag_xop__Include--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct x__Data *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_x__Data, 0, sizeof(struct x__Data), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xop__Include > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_x__Data(struct soap *soap, const struct x__Data *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_x__Data);
	if (soap_out_x__Data(soap, tag?tag:"x:Data", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct x__Data * SOAP_FMAC4 soap_get_x__Data(struct soap *soap, struct x__Data *p, const char *tag, const char *type)
{
	if ((p = soap_in_x__Data(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct x__Data * SOAP_FMAC2 soap_instantiate_x__Data(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_x__Data(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_x__Data, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct x__Data);
		if (size)
			*size = sizeof(struct x__Data);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct x__Data, n);
		if (size)
			*size = n * sizeof(struct x__Data);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct x__Data*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_x__Data(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct x__Data %p -> %p\n", q, p));
	*(struct x__Data*)p = *(struct x__Data*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__upload_message(struct soap *soap, struct ns__upload_message *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Device_ID);
	soap_default_int(soap, &a->returntype);
	a->state = NULL;
	soap_default_string(soap, &a->authstr);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__upload_message(struct soap *soap, const struct ns__upload_message *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Device_ID);
	soap_embedded(soap, &a->returntype, SOAP_TYPE_int);
	soap_serialize_PointerTons__MsgList(soap, &a->state);
	soap_serialize_string(soap, &a->authstr);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__upload_message(struct soap *soap, const char *tag, int id, const struct ns__upload_message *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__upload_message), type))
		return soap->error;
	if (soap_out_string(soap, "Device-ID", -1, &a->Device_ID, ""))
		return soap->error;
	if (soap_out_int(soap, "returntype", -1, &a->returntype, ""))
		return soap->error;
	if (soap_out_PointerTons__MsgList(soap, "state", -1, &a->state, ""))
		return soap->error;
	if (soap_out_string(soap, "authstr", -1, &a->authstr, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__upload_message * SOAP_FMAC4 soap_in_ns__upload_message(struct soap *soap, const char *tag, struct ns__upload_message *a, const char *type)
{
	size_t soap_flag_Device_ID = 1;
	size_t soap_flag_returntype = 1;
	size_t soap_flag_state = 1;
	size_t soap_flag_authstr = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__upload_message *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__upload_message, sizeof(struct ns__upload_message), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__upload_message(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Device_ID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Device-ID", &a->Device_ID, "xsd:string"))
				{	soap_flag_Device_ID--;
					continue;
				}
			if (soap_flag_returntype && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "returntype", &a->returntype, "xsd:int"))
				{	soap_flag_returntype--;
					continue;
				}
			if (soap_flag_state && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__MsgList(soap, "state", &a->state, "ns:MsgList"))
				{	soap_flag_state--;
					continue;
				}
			if (soap_flag_authstr && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "authstr", &a->authstr, "xsd:string"))
				{	soap_flag_authstr--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__upload_message *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__upload_message, 0, sizeof(struct ns__upload_message), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_returntype > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__upload_message(struct soap *soap, const struct ns__upload_message *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__upload_message);
	if (soap_out_ns__upload_message(soap, tag?tag:"ns:upload-message", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__upload_message * SOAP_FMAC4 soap_get_ns__upload_message(struct soap *soap, struct ns__upload_message *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__upload_message(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__upload_message * SOAP_FMAC2 soap_instantiate_ns__upload_message(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__upload_message(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__upload_message, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__upload_message);
		if (size)
			*size = sizeof(struct ns__upload_message);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__upload_message, n);
		if (size)
			*size = n * sizeof(struct ns__upload_message);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__upload_message*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__upload_message(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__upload_message %p -> %p\n", q, p));
	*(struct ns__upload_message*)p = *(struct ns__upload_message*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__upload_messageResponse(struct soap *soap, struct ns__upload_messageResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__upload_messageResponse(struct soap *soap, const struct ns__upload_messageResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTons__ResultList(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__upload_messageResponse(struct soap *soap, const char *tag, int id, const struct ns__upload_messageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__upload_messageResponse), type))
		return soap->error;
	if (soap_out_PointerTons__ResultList(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__upload_messageResponse * SOAP_FMAC4 soap_in_ns__upload_messageResponse(struct soap *soap, const char *tag, struct ns__upload_messageResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__upload_messageResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__upload_messageResponse, sizeof(struct ns__upload_messageResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__upload_messageResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons__ResultList(soap, "result", &a->result, "ns:ResultList"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__upload_messageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__upload_messageResponse, 0, sizeof(struct ns__upload_messageResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__upload_messageResponse(struct soap *soap, const struct ns__upload_messageResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__upload_messageResponse);
	if (soap_out_ns__upload_messageResponse(soap, tag?tag:"ns:upload-messageResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__upload_messageResponse * SOAP_FMAC4 soap_get_ns__upload_messageResponse(struct soap *soap, struct ns__upload_messageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__upload_messageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__upload_messageResponse * SOAP_FMAC2 soap_instantiate_ns__upload_messageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__upload_messageResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__upload_messageResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__upload_messageResponse);
		if (size)
			*size = sizeof(struct ns__upload_messageResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__upload_messageResponse, n);
		if (size)
			*size = n * sizeof(struct ns__upload_messageResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__upload_messageResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__upload_messageResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__upload_messageResponse %p -> %p\n", q, p));
	*(struct ns__upload_messageResponse*)p = *(struct ns__upload_messageResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ResultList(struct soap *soap, struct ns__ResultList *a)
{	(void)soap;
	(void)soap; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ResultList(struct soap *soap, struct ns__ResultList const*a)
{
#ifndef WITH_NOIDREF
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_ns__ResultList))
		for (i = 0; i < a->__size; i++)
		{
			soap_serialize_PointerTons__ResultItem(soap, a->__ptr + i);
		}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ResultList(struct soap *soap, const char *tag, int id, const struct ns__ResultList *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_ns__ResultList);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap_out_PointerTons__ResultItem(soap, "item", -1, &a->__ptr[i], "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__ResultList * SOAP_FMAC4 soap_in_ns__ResultList(struct soap *soap, const char *tag, struct ns__ResultList *a, const char *type)
{	int i, j;
	struct ns__ResultItem **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "ns:ResultItem") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__ResultList *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ResultList, sizeof(struct ns__ResultList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__ResultList(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct ns__ResultItem **)soap_malloc(soap, sizeof(struct ns__ResultItem *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptr[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons__ResultItem(soap, NULL, a->__ptr + i, "ns:ResultItem"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (struct ns__ResultItem **)soap_push_block(soap, NULL, sizeof(struct ns__ResultItem *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_PointerTons__ResultItem(soap, NULL, p, "ns:ResultItem"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			a->__ptr = (struct ns__ResultItem **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__ResultList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ResultList, 0, sizeof(struct ns__ResultList), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ResultList(struct soap *soap, const struct ns__ResultList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_ns__ResultList);
	if (soap_out_ns__ResultList(soap, tag?tag:"ns:ResultList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__ResultList * SOAP_FMAC4 soap_get_ns__ResultList(struct soap *soap, struct ns__ResultList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ResultList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__ResultList * SOAP_FMAC2 soap_instantiate_ns__ResultList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ResultList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ResultList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__ResultList);
		if (size)
			*size = sizeof(struct ns__ResultList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__ResultList, n);
		if (size)
			*size = n * sizeof(struct ns__ResultList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__ResultList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ResultList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__ResultList %p -> %p\n", q, p));
	*(struct ns__ResultList*)p = *(struct ns__ResultList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__ResultItem(struct soap *soap, struct ns__ResultItem *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedLong(soap, &a->TimeStamp);
	soap_default_string(soap, &a->Order);
	soap_default_string(soap, &a->Param);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__ResultItem(struct soap *soap, const struct ns__ResultItem *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Order);
	soap_serialize_string(soap, &a->Param);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ResultItem(struct soap *soap, const char *tag, int id, const struct ns__ResultItem *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ResultItem), type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "TimeStamp", -1, &a->TimeStamp, ""))
		return soap->error;
	if (soap_out_string(soap, "Order", -1, &a->Order, ""))
		return soap->error;
	if (soap_out_string(soap, "Param", -1, &a->Param, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__ResultItem * SOAP_FMAC4 soap_in_ns__ResultItem(struct soap *soap, const char *tag, struct ns__ResultItem *a, const char *type)
{
	size_t soap_flag_TimeStamp = 1;
	size_t soap_flag_Order = 1;
	size_t soap_flag_Param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__ResultItem *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ResultItem, sizeof(struct ns__ResultItem), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__ResultItem(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TimeStamp && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "TimeStamp", &a->TimeStamp, "xsd:unsignedLong"))
				{	soap_flag_TimeStamp--;
					continue;
				}
			if (soap_flag_Order && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Order", &a->Order, "xsd:string"))
				{	soap_flag_Order--;
					continue;
				}
			if (soap_flag_Param && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "Param", &a->Param, "xsd:string"))
				{	soap_flag_Param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__ResultItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ResultItem, 0, sizeof(struct ns__ResultItem), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TimeStamp > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__ResultItem(struct soap *soap, const struct ns__ResultItem *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__ResultItem);
	if (soap_out_ns__ResultItem(soap, tag?tag:"ns:ResultItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__ResultItem * SOAP_FMAC4 soap_get_ns__ResultItem(struct soap *soap, struct ns__ResultItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ResultItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__ResultItem * SOAP_FMAC2 soap_instantiate_ns__ResultItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ResultItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ResultItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__ResultItem);
		if (size)
			*size = sizeof(struct ns__ResultItem);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__ResultItem, n);
		if (size)
			*size = n * sizeof(struct ns__ResultItem);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__ResultItem*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ResultItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__ResultItem %p -> %p\n", q, p));
	*(struct ns__ResultItem*)p = *(struct ns__ResultItem*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__MsgList(struct soap *soap, struct ns__MsgList *a)
{	(void)soap;
	(void)soap; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__MsgList(struct soap *soap, struct ns__MsgList const*a)
{
#ifndef WITH_NOIDREF
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_ns__MsgList))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_ns__MsgItem);
			soap_serialize_ns__MsgItem(soap, a->__ptr + i);
		}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MsgList(struct soap *soap, const char *tag, int id, const struct ns__MsgList *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_ns__MsgList);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap_out_ns__MsgItem(soap, "item", -1, &a->__ptr[i], "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__MsgList * SOAP_FMAC4 soap_in_ns__MsgList(struct soap *soap, const char *tag, struct ns__MsgList *a, const char *type)
{	int i, j;
	struct ns__MsgItem *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "ns:MsgItem") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct ns__MsgList *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__MsgList, sizeof(struct ns__MsgList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__MsgList(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_ns__MsgItem(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_ns__MsgItem(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_ns__MsgItem(soap, NULL, a->__ptr + i, "ns:MsgItem"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (struct ns__MsgItem *)soap_push_block(soap, NULL, sizeof(struct ns__MsgItem));
				if (!p)
					return NULL;
				SOAP_PLACEMENT_NEW(p, struct ns__MsgItem);
				soap_default_ns__MsgItem(soap, p);
				if (!soap_in_ns__MsgItem(soap, NULL, p, "ns:MsgItem"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			if (soap->blist->size)
				a->__ptr = soap_new_ns__MsgItem(soap, soap->blist->size/sizeof(struct ns__MsgItem));
			else
				a->__ptr = NULL;
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__MsgList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__MsgList, 0, sizeof(struct ns__MsgList), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__MsgList(struct soap *soap, const struct ns__MsgList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_ns__MsgList);
	if (soap_out_ns__MsgList(soap, tag?tag:"ns:MsgList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__MsgList * SOAP_FMAC4 soap_get_ns__MsgList(struct soap *soap, struct ns__MsgList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__MsgList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__MsgList * SOAP_FMAC2 soap_instantiate_ns__MsgList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__MsgList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__MsgList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__MsgList);
		if (size)
			*size = sizeof(struct ns__MsgList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__MsgList, n);
		if (size)
			*size = n * sizeof(struct ns__MsgList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__MsgList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__MsgList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__MsgList %p -> %p\n", q, p));
	*(struct ns__MsgList*)p = *(struct ns__MsgList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__MsgItem(struct soap *soap, struct ns__MsgItem *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->type);
	soap_default_string(soap, &a->msg);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__MsgItem(struct soap *soap, const struct ns__MsgItem *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->type);
	soap_serialize_string(soap, &a->msg);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__MsgItem(struct soap *soap, const char *tag, int id, const struct ns__MsgItem *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__MsgItem), type))
		return soap->error;
	if (soap_out_string(soap, "type", -1, &a->type, ""))
		return soap->error;
	if (soap_out_string(soap, "msg", -1, &a->msg, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__MsgItem * SOAP_FMAC4 soap_in_ns__MsgItem(struct soap *soap, const char *tag, struct ns__MsgItem *a, const char *type)
{
	size_t soap_flag_type = 1;
	size_t soap_flag_msg = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__MsgItem *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__MsgItem, sizeof(struct ns__MsgItem), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__MsgItem(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "type", &a->type, "xsd:string"))
				{	soap_flag_type--;
					continue;
				}
			if (soap_flag_msg && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "msg", &a->msg, "xsd:string"))
				{	soap_flag_msg--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__MsgItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__MsgItem, 0, sizeof(struct ns__MsgItem), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__MsgItem(struct soap *soap, const struct ns__MsgItem *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__MsgItem);
	if (soap_out_ns__MsgItem(soap, tag?tag:"ns:MsgItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__MsgItem * SOAP_FMAC4 soap_get_ns__MsgItem(struct soap *soap, struct ns__MsgItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__MsgItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__MsgItem * SOAP_FMAC2 soap_instantiate_ns__MsgItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__MsgItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__MsgItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__MsgItem);
		if (size)
			*size = sizeof(struct ns__MsgItem);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__MsgItem, n);
		if (size)
			*size = n * sizeof(struct ns__MsgItem);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__MsgItem*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__MsgItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__MsgItem %p -> %p\n", q, p));
	*(struct ns__MsgItem*)p = *(struct ns__MsgItem*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xmime5__base64Binary(struct soap *soap, struct xmime5__base64Binary *a)
{	(void)soap;
	(void)soap; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptr = NULL;
	a->id = NULL;
	a->type = NULL;
	a->options = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xmime5__base64Binary(struct soap *soap, struct xmime5__base64Binary const*a)
{
#ifndef WITH_NOIDREF
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_xmime5__base64Binary))
		if (a->id || a->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmime5__base64Binary(struct soap *soap, const char *tag, int id, const struct xmime5__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xmime5__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xmime5__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xmime5__base64Binary * SOAP_FMAC4 soap_in_xmime5__base64Binary(struct soap *soap, const char *tag, struct xmime5__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct xmime5__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xmime5__base64Binary, sizeof(struct xmime5__base64Binary), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xmime5__base64Binary(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (struct xmime5__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xmime5__base64Binary, 0, sizeof(struct xmime5__base64Binary), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xmime5__base64Binary(struct soap *soap, const struct xmime5__base64Binary *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_xmime5__base64Binary);
	if (soap_out_xmime5__base64Binary(soap, tag?tag:"xmime5:base64Binary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xmime5__base64Binary * SOAP_FMAC4 soap_get_xmime5__base64Binary(struct soap *soap, struct xmime5__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xmime5__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct xmime5__base64Binary * SOAP_FMAC2 soap_instantiate_xmime5__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xmime5__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xmime5__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct xmime5__base64Binary);
		if (size)
			*size = sizeof(struct xmime5__base64Binary);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct xmime5__base64Binary, n);
		if (size)
			*size = n * sizeof(struct xmime5__base64Binary);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct xmime5__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmime5__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct xmime5__base64Binary %p -> %p\n", q, p));
	*(struct xmime5__base64Binary*)p = *(struct xmime5__base64Binary*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__xop__Include(struct soap *soap, struct _xop__Include *a)
{	(void)soap;
	(void)soap; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptr = NULL;
	a->id = NULL;
	a->type = NULL;
	a->options = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xop__Include(struct soap *soap, struct _xop__Include const*a)
{
#ifndef WITH_NOIDREF
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE__xop__Include))
		if (a->id || a->type)
			soap->mode |= SOAP_ENC_DIME;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__xop__Include(struct soap *soap, const char *tag, int id, const struct _xop__Include *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE__xop__Include);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE__xop__Include);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_in__xop__Include(struct soap *soap, const char *tag, struct _xop__Include *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct _xop__Include *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__xop__Include, sizeof(struct _xop__Include), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default__xop__Include(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (struct _xop__Include *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__xop__Include, 0, sizeof(struct _xop__Include), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xop__Include(struct soap *soap, const struct _xop__Include *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE__xop__Include);
	if (soap_out__xop__Include(soap, tag?tag:"xop:Include", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_get__xop__Include(struct soap *soap, struct _xop__Include *p, const char *tag, const char *type)
{
	if ((p = soap_in__xop__Include(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct _xop__Include * SOAP_FMAC2 soap_instantiate__xop__Include(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__xop__Include(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__xop__Include, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct _xop__Include);
		if (size)
			*size = sizeof(struct _xop__Include);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct _xop__Include, n);
		if (size)
			*size = n * sizeof(struct _xop__Include);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct _xop__Include*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__xop__Include(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct _xop__Include %p -> %p\n", q, p));
	*(struct _xop__Include*)p = *(struct _xop__Include*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__GetDataResponse(struct soap *soap, struct ns__GetDataResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__GetDataResponse))
		soap_serialize_ns__GetDataResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__GetDataResponse(struct soap *soap, const char *tag, int id, struct ns__GetDataResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__GetDataResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns__GetDataResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__GetDataResponse ** SOAP_FMAC4 soap_in_PointerTons__GetDataResponse(struct soap *soap, const char *tag, struct ns__GetDataResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__GetDataResponse **)soap_malloc(soap, sizeof(struct ns__GetDataResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__GetDataResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__GetDataResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__GetDataResponse, sizeof(struct ns__GetDataResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__GetDataResponse(struct soap *soap, struct ns__GetDataResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__GetDataResponse);
	if (soap_out_PointerTons__GetDataResponse(soap, tag?tag:"ns:GetDataResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetDataResponse ** SOAP_FMAC4 soap_get_PointerTons__GetDataResponse(struct soap *soap, struct ns__GetDataResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__GetDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTox__Keys(struct soap *soap, struct x__Keys *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_x__Keys))
		soap_serialize_x__Keys(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTox__Keys(struct soap *soap, const char *tag, int id, struct x__Keys *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_x__Keys);
	if (id < 0)
		return soap->error;
	return soap_out_x__Keys(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct x__Keys ** SOAP_FMAC4 soap_in_PointerTox__Keys(struct soap *soap, const char *tag, struct x__Keys **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct x__Keys **)soap_malloc(soap, sizeof(struct x__Keys *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_x__Keys(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct x__Keys **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_x__Keys, sizeof(struct x__Keys), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTox__Keys(struct soap *soap, struct x__Keys *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTox__Keys);
	if (soap_out_PointerTox__Keys(soap, tag?tag:"x:Keys", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct x__Keys ** SOAP_FMAC4 soap_get_PointerTox__Keys(struct soap *soap, struct x__Keys **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTox__Keys(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTox__DataSet(struct soap *soap, struct x__DataSet *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_x__DataSet))
		soap_serialize_x__DataSet(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTox__DataSet(struct soap *soap, const char *tag, int id, struct x__DataSet *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_x__DataSet);
	if (id < 0)
		return soap->error;
	return soap_out_x__DataSet(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct x__DataSet ** SOAP_FMAC4 soap_in_PointerTox__DataSet(struct soap *soap, const char *tag, struct x__DataSet **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct x__DataSet **)soap_malloc(soap, sizeof(struct x__DataSet *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_x__DataSet(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct x__DataSet **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_x__DataSet, sizeof(struct x__DataSet), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTox__DataSet(struct soap *soap, struct x__DataSet *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTox__DataSet);
	if (soap_out_PointerTox__DataSet(soap, tag?tag:"x:DataSet", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct x__DataSet ** SOAP_FMAC4 soap_get_PointerTox__DataSet(struct soap *soap, struct x__DataSet **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTox__DataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostring);
	if (soap_out_PointerTostring(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTox__Data(struct soap *soap, struct x__Data *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_x__Data))
		soap_serialize_x__Data(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTox__Data(struct soap *soap, const char *tag, int id, struct x__Data *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_x__Data);
	if (id < 0)
		return soap->error;
	return soap_out_x__Data(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct x__Data ** SOAP_FMAC4 soap_in_PointerTox__Data(struct soap *soap, const char *tag, struct x__Data **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct x__Data **)soap_malloc(soap, sizeof(struct x__Data *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_x__Data(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct x__Data **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_x__Data, sizeof(struct x__Data), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTox__Data(struct soap *soap, struct x__Data *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTox__Data);
	if (soap_out_PointerTox__Data(soap, tag?tag:"x:Data", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct x__Data ** SOAP_FMAC4 soap_get_PointerTox__Data(struct soap *soap, struct x__Data **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTox__Data(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ResultList(struct soap *soap, struct ns__ResultList *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		soap_serialize_ns__ResultList(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ResultList(struct soap *soap, const char *tag, int id, struct ns__ResultList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_ns__ResultList);
	if (id < 0)
		return soap->error;
	return soap_out_ns__ResultList(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__ResultList ** SOAP_FMAC4 soap_in_PointerTons__ResultList(struct soap *soap, const char *tag, struct ns__ResultList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__ResultList **)soap_malloc(soap, sizeof(struct ns__ResultList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__ResultList(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__ResultList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ResultList, sizeof(struct ns__ResultList), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ResultList(struct soap *soap, struct ns__ResultList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ResultList);
	if (soap_out_PointerTons__ResultList(soap, tag?tag:"ns:ResultList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__ResultList ** SOAP_FMAC4 soap_get_PointerTons__ResultList(struct soap *soap, struct ns__ResultList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ResultList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__MsgList(struct soap *soap, struct ns__MsgList *const*a)
{
#ifndef WITH_NOIDREF
	if (*a)
		soap_serialize_ns__MsgList(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__MsgList(struct soap *soap, const char *tag, int id, struct ns__MsgList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_ns__MsgList);
	if (id < 0)
		return soap->error;
	return soap_out_ns__MsgList(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__MsgList ** SOAP_FMAC4 soap_in_PointerTons__MsgList(struct soap *soap, const char *tag, struct ns__MsgList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__MsgList **)soap_malloc(soap, sizeof(struct ns__MsgList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__MsgList(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__MsgList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__MsgList, sizeof(struct ns__MsgList), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__MsgList(struct soap *soap, struct ns__MsgList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__MsgList);
	if (soap_out_PointerTons__MsgList(soap, tag?tag:"ns:MsgList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__MsgList ** SOAP_FMAC4 soap_get_PointerTons__MsgList(struct soap *soap, struct ns__MsgList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__MsgList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons__ResultItem(struct soap *soap, struct ns__ResultItem **const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons__ResultItem))
		soap_serialize_PointerTons__ResultItem(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons__ResultItem(struct soap *soap, const char *tag, int id, struct ns__ResultItem **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons__ResultItem);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons__ResultItem(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__ResultItem *** SOAP_FMAC4 soap_in_PointerToPointerTons__ResultItem(struct soap *soap, const char *tag, struct ns__ResultItem ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__ResultItem ***)soap_malloc(soap, sizeof(struct ns__ResultItem **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons__ResultItem(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__ResultItem ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons__ResultItem, sizeof(struct ns__ResultItem *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons__ResultItem(struct soap *soap, struct ns__ResultItem **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons__ResultItem);
	if (soap_out_PointerToPointerTons__ResultItem(soap, tag?tag:"ns:ResultItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__ResultItem *** SOAP_FMAC4 soap_get_PointerToPointerTons__ResultItem(struct soap *soap, struct ns__ResultItem ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons__ResultItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ResultItem(struct soap *soap, struct ns__ResultItem *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ResultItem))
		soap_serialize_ns__ResultItem(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ResultItem(struct soap *soap, const char *tag, int id, struct ns__ResultItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ResultItem);
	if (id < 0)
		return soap->error;
	return soap_out_ns__ResultItem(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__ResultItem ** SOAP_FMAC4 soap_in_PointerTons__ResultItem(struct soap *soap, const char *tag, struct ns__ResultItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__ResultItem **)soap_malloc(soap, sizeof(struct ns__ResultItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__ResultItem(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__ResultItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ResultItem, sizeof(struct ns__ResultItem), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ResultItem(struct soap *soap, struct ns__ResultItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__ResultItem);
	if (soap_out_PointerTons__ResultItem(soap, tag?tag:"ns:ResultItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__ResultItem ** SOAP_FMAC4 soap_get_PointerTons__ResultItem(struct soap *soap, struct ns__ResultItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ResultItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__MsgItem(struct soap *soap, struct ns__MsgItem *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__MsgItem))
		soap_serialize_ns__MsgItem(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__MsgItem(struct soap *soap, const char *tag, int id, struct ns__MsgItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__MsgItem);
	if (id < 0)
		return soap->error;
	return soap_out_ns__MsgItem(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__MsgItem ** SOAP_FMAC4 soap_in_PointerTons__MsgItem(struct soap *soap, const char *tag, struct ns__MsgItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__MsgItem **)soap_malloc(soap, sizeof(struct ns__MsgItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__MsgItem(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__MsgItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__MsgItem, sizeof(struct ns__MsgItem), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__MsgItem(struct soap *soap, struct ns__MsgItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__MsgItem);
	if (soap_out_PointerTons__MsgItem(soap, tag?tag:"ns:MsgItem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__MsgItem ** SOAP_FMAC4 soap_get_PointerTons__MsgItem(struct soap *soap, struct ns__MsgItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__MsgItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
