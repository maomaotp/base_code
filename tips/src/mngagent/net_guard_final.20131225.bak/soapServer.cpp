/* soapServer.cpp
   Generated by gSOAP 2.8.14 from ssl.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.14 2013-03-31 11:10:41 GMT")


extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:upload-message"))
		return soap_serve_ns__upload_message(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:PutData"))
		return soap_serve_ns__PutData(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:GetData"))
		return soap_serve_ns__GetData(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__upload_message(struct soap *soap)
{	struct ns__upload_message soap_tmp_ns__upload_message;
	struct ns__upload_messageResponse soap_tmp_ns__upload_messageResponse;
	struct ns__ResultList soap_tmp_ns__ResultList;
	soap_default_ns__upload_messageResponse(soap, &soap_tmp_ns__upload_messageResponse);
	soap_default_ns__ResultList(soap, &soap_tmp_ns__ResultList);
	soap_tmp_ns__upload_messageResponse.result = &soap_tmp_ns__ResultList;
	soap_default_ns__upload_message(soap, &soap_tmp_ns__upload_message);
	soap->encodingStyle = "";
	if (!soap_get_ns__upload_message(soap, &soap_tmp_ns__upload_message, "ns:upload-message", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__upload_message(soap, soap_tmp_ns__upload_message.Device_ID, soap_tmp_ns__upload_message.returntype, soap_tmp_ns__upload_message.state, soap_tmp_ns__upload_message.authstr, soap_tmp_ns__upload_messageResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__upload_messageResponse(soap, &soap_tmp_ns__upload_messageResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__upload_messageResponse(soap, &soap_tmp_ns__upload_messageResponse, "ns:upload-messageResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__upload_messageResponse(soap, &soap_tmp_ns__upload_messageResponse, "ns:upload-messageResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__PutData(struct soap *soap)
{	struct ns__PutData soap_tmp_ns__PutData;
	struct ns__PutDataResponse soap_tmp_ns__PutDataResponse;
	int soap_tmp_int;
	soap_default_ns__PutDataResponse(soap, &soap_tmp_ns__PutDataResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__PutDataResponse.response = &soap_tmp_int;
	soap_default_ns__PutData(soap, &soap_tmp_ns__PutData);
	soap->encodingStyle = "";
	if (!soap_get_ns__PutData(soap, &soap_tmp_ns__PutData, "ns:PutData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__PutData(soap, soap_tmp_ns__PutData.x__data, soap_tmp_ns__PutData.x__keys, soap_tmp_ns__PutData.device_id, soap_tmp_ns__PutData.authstr, soap_tmp_ns__PutDataResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__PutDataResponse(soap, &soap_tmp_ns__PutDataResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__PutDataResponse(soap, &soap_tmp_ns__PutDataResponse, "ns:PutDataResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__PutDataResponse(soap, &soap_tmp_ns__PutDataResponse, "ns:PutDataResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__GetData(struct soap *soap)
{	struct ns__GetData soap_tmp_ns__GetData;
	struct ns__GetDataResponse _param_1;
	soap_default_ns__GetDataResponse(soap, &_param_1);
	soap_default_ns__GetData(soap, &soap_tmp_ns__GetData);
	soap->encodingStyle = "";
	if (!soap_get_ns__GetData(soap, &soap_tmp_ns__GetData, "ns:GetData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__GetData(soap, soap_tmp_ns__GetData.x__keys, soap_tmp_ns__GetData.device_id, soap_tmp_ns__GetData.authstr, &_param_1);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__GetDataResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__GetDataResponse(soap, &_param_1, "ns:GetDataResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__GetDataResponse(soap, &_param_1, "ns:GetDataResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
